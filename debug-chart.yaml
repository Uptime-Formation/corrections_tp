NAME: test
LAST DEPLOYED: Mon Apr 25 23:05:42 2022
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
frontend:
  image:
    name: frontend
    tag: latest
  service:
    port: 5000
imagebackend:
  image:
    name: amouat/dnmonster
    tag: "1.0"
ingress:
  annotations: {}
  className: ""
  enabled: true
  hosts:
  - host: monsterchart.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
redis:
  image:
    name: redis
    tag: latest

HOOKS:
MANIFEST:
---
# Source: monsterchart/templates/frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: frontend-test-monsterchart
  labels:
    app: monsterstack
spec:
  ports:
    - port: 5000
  selector:
    app: monsterstack
    partie: frontend-test-monsterchart
  type: LoadBalancer
---
# Source: monsterchart/templates/imagebackend.yaml
apiVersion: v1
kind: Service
metadata:
  name: imagebackend-test-monsterchart
  labels:
    app: monsterstack
spec:
  ports:
    - port: 8080
  selector:
    app: monsterstack 
    partie: imagebackend-test-monsterchart
  type: ClusterIP
---
# Source: monsterchart/templates/redis.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-test-monsterchart
  labels:
    app: monsterstack
spec:
  ports:
    - port: 6379
  selector:
    app: monsterstack
    partie: redis-test-monsterchart
  type: ClusterIP
---
# Source: monsterchart/templates/frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-test-monsterchart
  labels:
    app: monsterstack
spec:
  selector:
    matchLabels:
      app: monsterstack
      partie: frontend-test-monsterchart
  strategy:
    type: Recreate
  replicas: 3
  template:
    metadata:
      labels:
        app: monsterstack
        partie: frontend-test-monsterchart
    spec:
      containers:
      - name: frontend
        image: frontend:latest
        ports:
        - containerPort: 5000
        livenessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 1
        readinessProbe:
          httpGet:
            path: /healthz
            port: 5000
            httpHeaders:
            - name: Accept
              value: application/json
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 10
          failureThreshold: 3
        env:
        - name: CONTEXT
          value: DEV
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
          limits:
            cpu: "300m"
            memory: "200Mi"
---
# Source: monsterchart/templates/imagebackend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: imagebackend-test-monsterchart 
  labels:
    app: monsterstack
spec:
  selector:
    matchLabels:
      app: monsterstack
      partie: imagebackend-test-monsterchart
  strategy:
    type: Recreate
  replicas: 5
  template:
    metadata:
      labels:
        app: monsterstack
        partie: imagebackend-test-monsterchart
    spec:
      containers:
      - image: amouat/dnmonster:1.0
        name: imagebackend
        ports:
        - containerPort: 8080
          name: imagebackend
---
# Source: monsterchart/templates/redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-test-monsterchart 
  labels:
    app: monsterstack
spec:
  selector:
    matchLabels:
      app: monsterstack
      partie: redis-test-monsterchart
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: monsterstack
        partie: redis-test-monsterchart
    spec:
      containers:
      - image: redis:latest
        name: redis
        ports:
        - containerPort: 6379
          name: redis
---
# Source: monsterchart/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-monsterchart
  labels:
    helm.sh/chart: monsterchart-0.1.0
    app.kubernetes.io/name: monsterchart
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "monsterchart.local"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: frontend-test-monsterchart
                port:
                  number: 5000

