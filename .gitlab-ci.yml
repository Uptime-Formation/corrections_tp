stages:
  - check
  - build-dirty
  - integration
  - build

linting:
  stage: check
  image: python:3.10-slim
  script:
    - pip install pyflakes
    - pyflakes app/*.py

unit-testing:
  stage: check
  image: python:3.10-slim
  script:
    - cd app
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.dev.txt
    - python -m unittest tests/unit.py

docker-build-dirty:
  stage: build-dirty
  # Use the official docker image.
  image: docker:cli
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
  # Default branch is also tagged with `latest`
  script:
    - docker build --pull -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

integration-testing:
  stage: integration
  image: python:3.10-slim
  services:
    - name: redis:latest
      alias: redis
    - name: amouat/dnmonster:1.0
      alias: imagebackend
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  script:
    - cd app
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.dev.txt
    - python -m unittest tests/integration.py
    # - |
    #   if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
    #     docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
    #     docker push "$CI_REGISTRY_IMAGE:latest"
    #   fi